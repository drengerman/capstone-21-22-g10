# -*- coding: utf-8 -*-
"""capstone-path-detection

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14qHzAcJTCIiK6oBU3FQPhXfId6UyiVmr
"""

import numpy as np
import matplotlib.pyplot as plt
import cv2 as cv

img_name = "capstone_complete.PNG" #Name of the image (file type included)
img_colour = cv.imread(img_name, cv.IMREAD_COLOR) #Obtain the image (coloured)
img = cv.imread(img_name, cv.IMREAD_GRAYSCALE) #Obtain the image (grayscale)
height, width = img.shape #Obtain the image's dimensions
mask = np.zeros([height, width]) #Prep the mask

threshold = 25 #Set the brightness threshold (0 to 255)
pixel_dim = np.argwhere(img < threshold) #Find what coordinates have a brightness < threshold
for element in pixel_dim: #Iterate through each coordinate
  x, y = element #Retrieve the x and y coordinates
  mask[x][y] = 255 #Set the mask at (x, y) to be full brightness

mask = cv.convertScaleAbs(mask) #Get the mask ready for contouring
c_ret, c_thresh = cv.threshold(mask, 127, 255, 0) #Prep the contour thresholds
method = cv.CHAIN_APPROX_SIMPLE #The method of contouring
contours, hierarchy = cv.findContours(c_thresh, cv.RETR_TREE, method) #Find the contours

scale_percent = 0.2
new_h = int(contours.shape[0] * scale_percent)
new_w = int(countours.shape[1] * scale_percent)
dim = [new_w, new_h]
resized = cv.resize(contours, dim, interpolation = cv.INTER_AREA)

fig = plt.figure(figsize=(10,10)) #Prepare the figure to be shown


#The original colour image
fig.add_subplot(2, 2, 1)
plt.imshow(cv.cvtColor(img_colour, cv.COLOR_BGR2RGB))
plt.title("Original Colour Image")

#The grayscaled original image
fig.add_subplot(2, 2, 2)
plt.imshow(img, cmap='gray')
plt.title("Original Grayscale Image")

#Image with brightness mask
fig.add_subplot(2, 2, 3)
plt.imshow(mask, cmap='magma')
plt.title("Masked Image")

#Mask with contour
fig.add_subplot(2, 2, 4)
plt.imshow(cv.drawContours(mask, contours, -1, (0,255,0), 3), cmap='magma') #Show the contoured mask
plt.title("Contoured Mask")

plt.show()